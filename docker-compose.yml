version: '3.8'

services:
  cosyvoice:
    image: cosyvoice-app:rtx3090-v2.0
    build:
      context: .
      dockerfile: Dockerfile.app
      args:
        - BASE_IMAGE=cosyvoice-base:rtx3090-v2.0
    container_name: cosyvoice-gradio
    restart: unless-stopped
    
    # 포트 매핑
    ports:
      - "7860:7860"  # Gradio Web UI
      - "8000:8000"  # FastAPI (선택적)
    
    # 환경 변수
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - GRADIO_SERVER_NAME=0.0.0.0
      - GRADIO_SERVER_PORT=7860
      - PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:1024
      - OMP_NUM_THREADS=8
      - MKL_NUM_THREADS=8
      
      # 모델 다운로드 제어
      - DOWNLOAD_INSTRUCT_MODEL=false
      - DOWNLOAD_BASE_MODEL=false
      
      # Gradio 설정
      - GRADIO_SHARE=false
      - GRADIO_INBROWSER=false
    
    # 볼륨 매핑
    volumes:
      - ./pretrained_models:/app/pretrained_models  # 모델 저장
      - ./cache:/app/.cache                         # 캐시
      - /tmp:/tmp                                   # 임시 파일
      - ./logs:/app/logs                           # 로그 (선택적)
    
    # GPU 설정
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    
    # 헬스체크
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7860/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    
    # 네트워크 설정
    networks:
      - cosyvoice-network
    
    # 리소스 제한 (선택적)
    # mem_limit: 16g
    # memswap_limit: 16g
    # shm_size: 2g

  # 선택적: CPU 전용 버전
  cosyvoice-cpu:
    build:
      context: .
      dockerfile: Dockerfile.cpu
    image: cosyvoice-app:cpu
    container_name: cosyvoice-gradio-cpu
    restart: unless-stopped
    ports:
      - "7861:7860"  # 다른 포트 사용
    volumes:
      - ./pretrained_models:/app/pretrained_models
      - ./cache:/app/.cache
      - /tmp:/tmp
    environment:
      - CUDA_VISIBLE_DEVICES=""  # CPU 강제 사용
      - GRADIO_SERVER_NAME=0.0.0.0
      - GRADIO_SERVER_PORT=7860
      - OMP_NUM_THREADS=4
      - MKL_NUM_THREADS=4
    profiles:
      - cpu  # 'docker-compose --profile cpu up'으로 실행
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7860/"]
      interval: 45s
      timeout: 15s
      retries: 3
      start_period: 180s  # CPU는 더 오래 걸림
    networks:
      - cosyvoice-network

  # 선택적: Nginx 리버스 프록시
  nginx:
    image: nginx:alpine
    container_name: cosyvoice-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro  # SSL 인증서 (선택적)
    depends_on:
      - cosyvoice
    networks:
      - cosyvoice-network
    profiles:
      - nginx  # 'docker-compose --profile nginx up'으로 실행

networks:
  cosyvoice-network:
    driver: bridge

volumes:
  pretrained_models:
    driver: local
  cache:
    driver: local